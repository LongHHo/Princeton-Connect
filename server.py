#!/usr/bin/env python

#-----------------------------------------------------------------------
# penny.py
# Author: Bob Dondero
#-----------------------------------------------------------------------

from sys import argv
from database import searchEntry, insertEntry, getAll, deleteEntry
from sys import argv, stderr, exit
from flask import Flask, request, make_response, redirect, url_for
from flask import render_template, session
import entryInfo
import json
from CASClient import CASClient


#-----------------------------------------------------------------------

app = Flask(__name__, template_folder='templates')

# Generated by os.urandom(16)
app.secret_key = b'\xcdt\x8dn\xe1\xbdW\x9d[}yJ\xfc\xa3~/'

#-----------------------------------------------------------------------
# Very basic interface to search for entries in the database. Still need
# interface to search for entries
#-----------------------------------------------------------------------

@app.route('/')
@app.route('/templates/home')
def home():
    netid = CASClient().authenticate()
    
    
    # find particular entry of user
    user = entryInfo.entryInfo()
    # cas client appends a new line so get rid of it
    user.setNetid(netid.strip('\n'))
    
    # search for user in database
    entry = searchEntry(user)
    

    userEntry = entryInfo.entryInfo()
    if (len(entry) > 1):
        raise Exception('Only one entry per user')
    elif (len(entry) == 1):
        userEntry = entry[0]
    

    # If userEntry exists puts in string elements of each field
    # If it doesn't each get statement is '' and we pass in '' for each name-value pair

    name=userEntry.getName(),
    phone=userEntry.getPhone()
    email=userEntry.getEmail()
    description=userEntry.getDescription()
    city=userEntry.getCity() 
    address=userEntry.getAddress()
    
    # each field is part of the user entry so it displays in the submit form
    markersData = getAll() #getting all the user info
    html = render_template('home.html', netid=netid, name=name, phone=phone, email=email, description=description,
         address=address, city=city, markersData=json.dumps(markersData))


    response = make_response(html)
    return response

#-----------------------------------------------------------------------

# @app.route('/')
# @app.route('/templates/submit')
# def submit():
#     try:
#         username = CASClient().authenticate()


#         markersData = getAll() #getting all the user info
#         html = render_template('submitform.html', markersData=json.dumps(markersData))
#         response = make_response(html)
#         return response
#     except Exception as e:
#         print(e, file=stderr)
    

#-----------------------------------------------------------------------

# can only search for entries in database, not a function to insert
@app.route('/templates/lookup', methods=['GET'])
def lookup():
        # maybe put a "hello username" at the top
        username = CASClient().authenticate()

        # get search query of what user PUTS IN (not to be confused with user)
        netid = request.args.get('netid')
        name = request.args.get('name')
        email = request.args.get('email')
        phone = request.args.get('phone')
        description = request.args.get('description')
        city = request.args.get('city')

        user = entryInfo.entryInfo()
        user.setNetid(netid)
        user.setName(name)
        user.setEmail(email)
        user.setPhone(phone)
        user.setDescription(description)
        user.setCity(city)

        userEntries = searchEntry(user)

    
        html = render_template('lookup.html',
                userEntries=userEntries)
        response = make_response(html)

        return response


# handle after the submit button
@app.route('/templates/handleSubmit', methods=['GET'])
def handleSubmit():
    
    netid = CASClient().authenticate()

    # puts in fields based on submit form input
    name = request.args.get('name')
    email = request.args.get('email')
    phone = request.args.get('phone')
    description = request.args.get('description')
    city = request.args.get('city')
    address = request.args.get('address')

    
    entry = entryInfo.entryInfo(name, netid, email, phone, description, address, city)
    insertEntry(entry)
    

    # markersData = getAll()
    # html = render_template('submit.html', markersData=json.dumps(markersData))
    
    
    # find entry of logged on user, put in entry   
    user = entryInfo.entryInfo()
    user.setNetid(netid.strip('\n'))
    
    entry = searchEntry(user)
    userEntry = entryInfo.entryInfo()
    if (len(entry) > 1):
        raise Exception('Only one entry per user')
    elif (len(entry) == 1):
        userEntry = entry[0]
    
    # If userEntry exists puts in string elements of each field
    # If it doesn't each get statement is '' and we pass in '' for each name-value pair
    name=userEntry.getName(),
    phone=userEntry.getPhone()
    email=userEntry.getEmail()
    description=userEntry.getDescription()
    city=userEntry.getCity() 
    address=userEntry.getAddress()

    markersData = getAll() #getting all the user info
    html = render_template('home.html', netid=netid, name=name, phone=phone, email=email, description=description,
         address=address, city=city, markersData=json.dumps(markersData))
    response = make_response(html)

    return response
            
@app.route('/templates/delete', methods=['GET'])
def handleDelete():
    
    netid = CASClient().authenticate()
    
    # cas client appends a new line
    deleteEntry(netid.strip('\n'))
    

    # entry won't exist so pass in empty strings
    # json doesn't do None
    markersData=getAll()
    html = render_template('home.html', netid=netid, name='', 
    phone='', email='', description='',
         address='', city='', markersData=json.dumps(markersData))
    response = make_response(html)

    return response


#-----------------------------------------------------------------------

if __name__ == '__main__':
    if len(argv) != 2:
        print('Usage: ' + argv[0] + ' port')
        exit(1)
    app.run(host='0.0.0.0', port=int(argv[1]), debug=True)
