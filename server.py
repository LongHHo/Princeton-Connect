#!/usr/bin/env python

#-----------------------------------------------------------------------
# penny.py
# Author: Bob Dondero
#-----------------------------------------------------------------------

from sys import argv
from database import searchEntry, insertEntry, getAll, deleteEntry, insertUser, checkNetid, sendMessage, getContacts, getMessages, getNotification, getNotificationDetails, searchName
from sys import argv, stderr, exit
from flask import Flask, request, make_response, redirect, url_for, Response
from flask import render_template, session
import entryInfo
import json
from CASClient import CASClient


#-----------------------------------------------------------------------

app = Flask(__name__, template_folder='templates')

# Generated by os.urandom(16)
app.secret_key = b'\xcdt\x8dn\xe1\xbdW\x9d[}yJ\xfc\xa3~/'

#-----------------------------------------------------------------------
# Very basic interface to search for entries in the database. Still need
# interface to search for entries
#-----------------------------------------------------------------------


@app.route('/')
def login():

    html = render_template('login.html')

    response = make_response(html)
    return response

@app.route('/logout')
def logout():

    casClient = CASClient()
    casClient.authenticate()
    casClient.logout()
    




@app.route('/templates/home')
def home():
   
    netid = CASClient().authenticate().strip('\n')
    print(netid)
    insertUser(netid)
    
    # find particular entry of user
    user = entryInfo.entryInfo()
    # cas client appends a new line so get rid of it
    user.setNetid(netid.strip('\n'))
    
    # search for user in database
    entry = searchEntry(user)


    userEntry = entryInfo.entryInfo()
    if (len(entry) > 1):
        raise Exception('Only one entry per user')
    elif (len(entry) == 1):
        userEntry = entry[0]
    

    # If userEntry exists puts in string elements of each field
    # If it doesn't each get statement is '' and we pass in '' for each name-value pair

    name=userEntry.getName(),
    phone=userEntry.getPhone()
    email=userEntry.getEmail()
    description=userEntry.getDescription()
    city=userEntry.getCity() 
    address=userEntry.getAddress()
    
    # each field is part of the user entry so it displays in the submit form
    markersData = getAll() #getting all the user info
    html = render_template('home.html', netid=netid, name=name, phone=phone, email=email, description=description,
         address=address, city=city, markersData=json.dumps(markersData))


    response = make_response(html)
    return response

#-----------------------------------------------------------------------

# @app.route('/')
# @app.route('/templates/submit')
# def submit():
#     try:
#         username = CASClient().authenticate()


#         markersData = getAll() #getting all the user info
#         html = render_template('submitform.html', markersData=json.dumps(markersData))
#         response = make_response(html)
#         return response
#     except Exception as e:
#         print(e, file=stderr)
    

#-----------------------------------------------------------------------

# can only search for entries in database, not a function to insert
@app.route('/templates/lookup', methods=['POST'])
def lookup():
        # maybe put a "hello username" at the top
        username = CASClient().authenticate().strip('\n')

        # get search query of what user PUTS IN (not to be confused with user)
        netid = request.args.get('netid')
        name = request.args.get('name1')
        email = request.args.get('email')
        phone = request.args.get('phone')
        description = request.args.get('description1')
        city = request.args.get('city1')

        user = entryInfo.entryInfo()
        user.setNetid(netid)
        user.setName(name)
        user.setEmail(email)
        user.setPhone(phone)
        user.setDescription(description)
        user.setCity(city)

        userEntries = searchEntry(user)
    
        html = render_template('results.html', netid="", name=name, phone="", email="", description=description,
         address="", city=city, userEntries=userEntries)
        response = make_response(html)

        return response


# handle after the submit button
@app.route('/templates/handleSubmit', methods=['POST'])
def handleSubmit():
    
    netid = CASClient().authenticate().strip('\n')

    # puts in fields based on submit form input
    name = str(request.form.get('name'))
    email = str(request.form.get('email'))
    phone = str(request.form.get('phone'))
    description = str(request.form.get('description'))
    city = str(request.form.get('city'))
    address = str(request.form.get('address'))

    print(city + "This is city")
    
    entry = entryInfo.entryInfo(name, netid, email, phone, description, address, city)
    insertEntry(entry)
    

    # markersData = getAll()
    # html = render_template('submit.html', markersData=json.dumps(markersData))
    
    
    # find entry of logged on user, put in entry   
    user = entryInfo.entryInfo()
    user.setNetid(netid)
    
    entry = searchEntry(user)
    userEntry = entryInfo.entryInfo()
    if (len(entry) > 1):
        raise Exception('Only one entry per user')
    elif (len(entry) == 1):
        userEntry = entry[0]
    
    # If userEntry exists puts in string elements of each field
    # If it doesn't each get statement is '' and we pass in '' for each name-value pair
    name=userEntry.getName()
    phone=userEntry.getPhone()
    email=userEntry.getEmail()
    description=userEntry.getDescription()
    city=userEntry.getCity() 
    address=userEntry.getAddress()


    markersData = getAll() #getting all the user info
    print(name + "this for the submit")
    html = render_template('home.html', netid=netid, name=name, phone=phone, email=email, description=description,
         address=address, city=city, markersData=json.dumps(markersData))
    response = make_response(html)

    return response
            
@app.route('/templates/delete', methods=['GET'])
def handleDelete():
    
    netid = CASClient().authenticate().strip('\n')
    
    # cas client appends a new line
    deleteEntry(netid)
    

    # entry won't exist so pass in empty strings
    # json doesn't do None
    markersData=getAll()
    html = render_template('home.html', netid=netid, name='', 
    phone='', email='', description='',
         address='', city='', markersData=json.dumps(markersData))
    response = make_response(html)

    return response


@app.route('/templates/chat', methods=['GET'])
def chat():
    netid = CASClient().authenticate()
    netid = netid.strip()
    details = getNotificationDetails(netid)
    html = render_template('CHAT.html', message=details)
    response = make_response(html)
    return response


@app.route('/getContacts', methods=['GET'])
def getCntcts():
    netid = CASClient().authenticate()
    netid = netid.strip()
    contacts = getContacts(netid)
    response = json.dumps(contacts)
    return response


@app.route('/checkUser', methods=['GET'])
def checkUser():
    netid = request.args.get('netid')
    row = checkNetid(netid)
  
    print('checking user')

    html = ''

    if row is not None:
        for data in row:
            html += ('<option value ="'+ data[0] + '">')
    
    print(html)
    response = make_response(html)
        

    return response


@app.route('/getNotifications', methods=['GET'])
def notif():

    netid = CASClient().authenticate()
    netid = netid.strip()
    n = getNotification(netid)
    ndata = json.dumps(n)
    return ndata



@app.route('/getMessages', methods=['GET'])
def getMsgs():
    contact = request.args.get('contact')
    netid = CASClient().authenticate()
    netid = netid.strip('\n')
    messages = getMessages(netid, contact)

    senderName = searchName(contact)


    data = [netid, messages, senderName]
    allData = json.dumps(data)


    return allData
    


@app.route('/sendMessage', methods=['GET'])
def sendMsg():
    netid = CASClient().authenticate()
    netid = netid.strip('\n')
    print('sending message')
    message = request.args.get('message')
    print(message)
    reciever = request.args.get('reciever')
    sender = netid
    sendMessage(sender, reciever, message)
    statuscode = Response(status=201)
    return statuscode




#-----------------------------------------------------------------------

if __name__ == '__main__':
    if len(argv) != 2:
        print('Usage: ' + argv[0] + ' port')
        exit(1)
    app.run(host='0.0.0.0', port=int(argv[1]), debug=True)
